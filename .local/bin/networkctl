#!/bin/sh

IFS='
'

wifi_rescan() {
	notif_id="$(notify-send -pt 0 "Scanning for WiFI access points..." "Please be patient :)")"
	nmcli --get-values "" device wifi list --rescan yes
	makoctl dismiss -n "$notif_id"
}

wifi_conn_menu() {
	action=""
	while true; do
		state="New"; connect="connect"; forget="";
		[ -n "$(nmcli --get-values "connection.id" connection show "$1")" ] && {
			[ -n "$(nmcli --get-values "connection.id" connection show --active "$1")" ] \
				&& { state="Connected"; connect="disconnect"; forget="forget"; } \
				|| { state="Known"; connect="connect"; forget="forget"; }
		}

		choice="$(CH_LINES=10 CH_WIDTH=500 CH_PROMPT="$1 - $state" choose $connect $forget)"
		case "$choice" in
			"") [ -z "$action" ] && break || exit;;
			"disconnect") nmcli connection down "$1" || notify-send "Failed to disconnect from $1" "Were you ever connected?";;
			"forget") nmcli connection delete "$1" || notify-send "Failed to forget $1" "Were you ever connected?";;
			"connect")
				password="$(CH_LINES=1 CH_WIDTH=500 CH_PROMPT="Password to $1" CH_PASSWORD=1 choose)"
				notif_id="$(notify-send -pt 0 "Connecting to $1..." "Please be patient :)")"
				[ -z "$password" ] \
					&& nmcli device wifi connect "$1" \
					|| nmcli device wifi connect "$1" password "$password" \
					&& action=1 \
					|| notify-send "Failed to connect to $1" "Wrong password?"
				makoctl dismiss -n "$notif_id"
				;;
		esac
	done
}

wifi_menu() {
	while true; do
		ssids="$(nmcli --get-values SSID device wifi list --rescan no | sed 's/\\:/;/g' | sort --unique)"
		securities="$(nmcli --get-values SSID,SECURITY device wifi list --rescan no | sed 's/\\:/;/g' | sort --unique)"
		signals="$(nmcli --get-values SSID,SIGNAL device wifi list --rescan no | sed 's/\\:/;/g' | sort --unique)"
		inuses="$(nmcli --get-values SSID,IN-USE device wifi list --rescan no | sed 's/\\:/;/g' | sort --unique)"
		choices="$(for ssid in $ssids; do
			security="$(echo "$securities" | grep --fixed-strings "$ssid" | cut -d : -f 2 | head -1)"
			[ -z "$security" ] && security="None"
			signal="$(echo "$signals" | grep --fixed-strings "$ssid" | cut -d : -f 2 | sort --reverse --numeric-sort | head -1)"
			inuse="$(echo "$inuses" | grep --fixed-strings "$ssid" | cut -d : -f 2 | sort --reverse | head -1)"
			echo "$ssid [$security] $signal% $inuse"
		done)"

		choice="$(CH_LINES=10 CH_WIDTH=500 CH_PROMPT="WiFi Control" choose rescan "$choices")"
		case "$choice" in
			"") break;;
			"rescan") wifi_rescan;;
			*) wifi_conn_menu "$(echo "$choice" | cut -d "[" -f 1 | xargs)";;
		esac
	done
}

bluetooth_rescan() {
	notif_id="$(notify-send -pt 0 "Scanning for Bluetooth devices..." "Please be patient :)")"
	bluetoothctl --timeout 5 scan on
	makoctl dismiss -n "$notif_id"
}

bluetooth_conn_menu() {
	action=""
	while true; do
		info="$(bluetoothctl info "$1")"
		[ -z "$info" ] && {
			notify-send "Unknown Bluetooth device $1" "Have your rescanned recently?"
			return 1
		}

		state="New"; connect=""; pair="pair"; trust=""
		name="$(echo "$info" | grep --fixed-strings "Name: " | cut -d " " -f 2-)"
		echo "$info" | grep --fixed-strings "Paired: yes" && {
			pair="forget"
			echo "$info" | grep --fixed-strings "Trusted: yes" && trust="untrust" || trust="trust"
			echo "$info" | grep --fixed-strings "Connected: yes" && {
				state="Connected"
				connect="disconnect"
			} || {
				state="Paired"
				connect="connect"
			}
		}

		# TODO: pairing -> connecting not quite working here
		choice="$(CH_LINES=10 CH_WIDTH=500 CH_PROMPT="$1 - $state" choose $connect $pair $trust)"
		case "$choice" in
			"") [ -z "$action" ] && break || exit;;
			"disconnect") bluetoothctl disconnect "$1" || notify-send "Failed to disconnect from $1" "";;
			"forget") bluetoothctl remove "$1" || notify-send "Failed to forget $1" "";;
			"trust") bluetoothctl trust "$1" || notify-send "Failed to trust $1" "";;
			"untrust") bluetoothctl untrust "$1" || notify-send "Failed to untrust $1" "";;
			"connect")
				bluetoothctl connect "$1"
				;;
			"pair")
				bluetoothctl pair "$1"
				;;
		esac
	done
}

bluetooth_menu() {
	bluetoothctl show | grep --fixed-strings "Powered: no" && bluetoothctl power on
	while true; do
		devices="$(bluetoothctl devices | cut -d " " -f 2 | sort --unique)"
		choices="$(for device in $devices; do
			info="$(bluetoothctl info "$device")"
			printf "$device"
			name="$(echo "$info" | grep --fixed-strings "Name: " | cut -d " " -f 2-)"
			[ -n "$name" ] && printf " $name"
			echo "$info" | grep --fixed-strings "Paired: yes" && printf " p"
			echo "$info" | grep --fixed-strings "Trusted: yes" && printf " t"
			echo "$info" | grep --fixed-strings "Connected: yes" && printf " *"
			echo ""
		done)"

		choice="$(CH_LINES=10 CH_WIDTH=500 CH_PROMPT="Bluetooth Control" choose rescan "$choices")"
		case "$choice" in
			"") break;;
			"rescan") bluetooth_rescan;;
			# TODO: advertise / discovery
			#"advertise") ;;
			#"discoverable") ;;
			*) bluetooth_conn_menu "$(echo "$choice" | cut -d " " -f 1 | xargs)";;
		esac
	done
}

choice="$1"
while true; do
	[ -z "$choice" ] && choice="$(CH_LINES=3 CH_WIDTH=100 CH_PROMPT="Network Control" choose wifi bluetooth)"
	case "$choice" in
		"") exit;;
		"wifi") wifi_menu;;
		"bluetooth") bluetooth_menu;;
		*) exit 1;;
	esac
	[ -n "$1" ] && break
done
