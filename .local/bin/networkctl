#!/bin/sh

IFS='
'

wifi_rescan() {
	notif_id="$(notify-send -pt 0 "Scanning for WiFI access points..." "Please be patient :)")"
	nmcli --get-values "" device wifi list --rescan yes
	makoctl dismiss -n "$notif_id"
}

wifi_conn_menu() {
	while true; do
		state="New"; connect="connect"; forget="";
		[ -n "$(nmcli --get-values "connection.id" connection show "$1")" ] && {
			[ -n "$(nmcli --get-values "connection.id" connection show --active "$1")" ] \
				&& { state="Connected"; connect="disconnect"; forget="forget"; } \
				|| { state="Known"; connect="connect"; forget="forget"; }
		}

		choice="$(CH_LINES=10 CH_WIDTH=500 CH_PROMPT="$1 - $state" choose $connect $forget)"
		case "$choice" in
			"") exit;;
			"disconnect") nmcli connection down "$1" || notify-send "Failed to disconnect from $1" "Were you ever connected?";;
			"forget") nmcli connection delete "$1" || notify-send "Failed to forget $1" "Were you ever connected?";;
			"connect")
				password="$(CH_LINES=1 CH_WIDTH=500 CH_PROMPT="Password to $1" CH_PASSWORD=1 choose)"
				notif_id="$(notify-send -pt 0 "Connecting to $1..." "Please be patient :)")"
				[ -z "$password" ] \
					&& nmcli device wifi connect "$1" \
					|| nmcli device wifi connect "$1" password "$password" \
					|| { notify-send "Failed to connect to $1" "Wrong password?" && nmcli connection delete "$1"; }
				makoctl dismiss -n "$notif_id"
				;;
		esac
	done
}

wifi_menu() {
	while true; do
		nmcli radio wifi | grep --fixed-strings "enabled" && {
			power="disable"
			rescan="rescan"
			ssids="$(nmcli --get-values SSID device wifi list --rescan no | sed 's/\\:/;/g' | sort --unique)"
			securities="$(nmcli --get-values SSID,SECURITY device wifi list --rescan no | sed 's/\\:/;/g' | sort --unique)"
			signals="$(nmcli --get-values SSID,SIGNAL device wifi list --rescan no | sed 's/\\:/;/g' | sort --unique)"
			inuses="$(nmcli --get-values SSID,IN-USE device wifi list --rescan no | sed 's/\\:/;/g' | sort --unique)"
			choices="$(for ssid in $ssids; do
				security="$(echo "$securities" | grep --fixed-strings "$ssid" | cut -d : -f 2 | head -1)"
				[ -z "$security" ] && security="None"
				nmcli --get-values "" connection show "$ssid" && security="$security | Saved"
				signal="$(echo "$signals" | grep --fixed-strings "$ssid" | cut -d : -f 2 | sort --reverse --numeric-sort | head -1)"
				inuse="$(echo "$inuses" | grep --fixed-strings "$ssid" | cut -d : -f 2 | sort --reverse | head -1)"
				echo "$ssid [$security] $signal% $known $inuse"
			done)"
		} || {
			power="enable"
			rescan=""
			choices=""
		}

		choice="$(CH_LINES=10 CH_WIDTH=500 CH_PROMPT="WiFi Control" choose "$power" "$rescan" "$choices")"
		case "$choice" in
			"") exit;;
			"rescan") wifi_rescan;;
			"disable") nmcli radio wifi off || notify-send "Failed to turn off WiFi radio" "";;
			"enable") nmcli radio wifi on || notify-send "Failed to turn on WiFi radio" "";;
			*) wifi_conn_menu "$(echo "$choice" | cut -d "[" -f 1 | xargs)";;
		esac
	done
}

bluetooth_rescan() {
	notif_id="$(notify-send -pt 0 "Scanning for Bluetooth devices..." "Please be patient :)")"
	bluetoothctl --timeout 3 scan on
	makoctl dismiss -n "$notif_id"
}

bluetooth_conn_menu() {
	while true; do
		info="$(bluetoothctl info "$1")"
		state="New"; connect=""; pair="pair"; trust=""
		name="$(echo "$info" | grep --fixed-strings "Name: " | cut -d " " -f 2-)"
		[ -z "$name" ] && name="$1"
		echo "$info" | grep --fixed-strings "Paired: yes" && {
			pair="forget"
			echo "$info" | grep --fixed-strings "Trusted: yes" && trust="untrust" || trust="trust"
			echo "$info" | grep --fixed-strings "Connected: yes" && { state="Connected"; connect="disconnect"; } || { state="Paired"; connect="connect"; }
		}

		choice="$(CH_LINES=10 CH_WIDTH=500 CH_PROMPT="$name - $state" choose $connect $pair $trust)"
		case "$choice" in
			"") exit;;
			"disconnect") bluetoothctl --timeout 5 disconnect "$1" || notify-send "Failed to disconnect from $1" "";;
			"forget") bluetoothctl --timeout 5 remove "$1" || notify-send "Failed to forget $1" "";;
			"trust") bluetoothctl --timeout 5 trust "$1" || notify-send "Failed to trust $1" "";;
			"untrust") bluetoothctl --timeout 5 untrust "$1" || notify-send "Failed to untrust $1" "";;
			# TODO: audio can be poor quality sometimes?
			"connect") bluetoothctl --timeout 5 connect "$1" || notify-send "Failed to connect to $1" "";;
			# TODO: pairing -> connecting not quite working here (probably need to input pin somehow)
			"pair") bluetoothctl --timeout 5 pair "$1" || notify-send "Failed to pair with $1" "";;
		esac
	done
}

bluetooth_menu() {
	while true; do
		bluetoothctl show | grep --fixed-strings "Powered: yes" && {
			power="disable"
			rescan="rescan"
			devices="$(bluetoothctl devices | cut -d " " -f 2 | sort --unique)"
			choices="$(for device in $devices; do
				info="$(bluetoothctl info "$device")"
				name="$(echo "$info" | grep --fixed-strings "Name: " | cut -d " " -f 2-)"
				[ -n "$name" ] && name=" $name"
				state="Unknown" \
					&& echo "$info" | grep --quiet --fixed-strings "Paired: yes" \
					&& state="Paired" \
					&& echo "$info" | grep --quiet --fixed-strings "Trusted: yes" \
					&& state="Trusted"
				inuse="" \
					&& echo "$info" | grep --quiet --fixed-strings "Connected: yes" \
					&& inuse="*"
				echo "$device$name [$state] $inuse"
			done)"
		} || {
			power="enable"
			rescan=""
			choices=""
		}

		choice="$(CH_LINES=10 CH_WIDTH=500 CH_PROMPT="Bluetooth Control" choose "$power" "$rescan" "$choices")"
		case "$choice" in
			"") exit;;
			"disable") bluetoothctl power off || notify-send "Failed to turn off Bluetooth radio" "";;
			"enable") bluetoothctl power on || notify-send "Failed to turn on Bluetooth radio" "";;
			"rescan") bluetooth_rescan;;
			# TODO: advertise / discovery
			*) bluetooth_conn_menu "$(echo "$choice" | cut -d " " -f 1 | xargs)";;
		esac
	done
}

choice="$1"
while true; do
	[ -z "$choice" ] && choice="$(CH_LINES=3 CH_WIDTH=100 CH_PROMPT="Network Control" choose wifi bluetooth)"
	case "$choice" in
		"") exit;;
		"wifi") wifi_menu;;
		"bluetooth") bluetooth_menu;;
		*) exit 1;;
	esac
	[ -n "$1" ] && break
done
