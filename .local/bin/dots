#!/bin/sh

# sh -c "$(curl https://h8c.de/dots)" -- init cli gui sys

# TODO: config
# TODO: vim
# TODO: emacs
# TODO: gtk+qt wayland backend
# TODO: theming
# TODO: idle and lock
# TODO: nvidia drivers

# Where to find dots repo
dots="$HOME/.local/dots"
git_ssh="git@github.com:/tedski999/dots"
git_http="https://github.com/tedski999/dots"

# Use dots as shortcut to git in home directory
[ "$1" != "init" ] && exec git --git-dir="$dots" --work-tree="$HOME" "$@"

# Parse command-line arguments
shift
unset cli gui sys
while [ "$#" -gt 0 ]; do
	case "$1" in
		cli) cli=1; shift;; # Install CLI packages with apt-get
		gui) gui=1; shift;; # Install GUI packages with apt-get
		sys) sys=1; shift;; # Configure system with root privileges
		*) echo "Usage: $0 init [cli] [gui] [sys]"; exit 1;;
	esac
done

# Test for privilages and apt-get
[ "$(id -u)" = "0" ] && { echo "Please run as non-root."; exit 1; }
[ -n "$cli$gui" ] && { hash apt-get || exit 1; }
[ -n "$cli$gui$sys" ] && { sudo -v || exit 1; }

# Common msg function
msg() { printf "\n\033[1;33m$@\033[0m\n"; }

# Ensure dots repo is installed
[ -d "$dots" ] || {
	msg "=== Bootstrapping dots ==="
	hash git || { [ -n "$cli$gui" ] && sudo apt-get -y install git || exit 1; }
	git clone --bare "$git_http" "$dots" || exit 1
	if ! out="$(git --git-dir="$dots" --work-tree="$HOME" checkout main 2>&1)"; then
		echo "WARNING: The next operation WILL overwrite the following files:"
		printf "%s" "$out" | tail --lines +2 | head --lines -2
		printf "Enter y to proceed with data loss: " && read -r res
		[ "$res" = "y" ] && git --git-dir="$dots" --work-tree="$HOME" checkout main --force || exit 1
	fi
}

# Install requested packages
tmp="$(mktemp --directory)" || exit 1
[ -n "$cligui" ] && {
	sudo apt-get -y update || exit 1
	sudo apt-get -y upgrade || exit 1
}
[ -n "$cli" ] && {
	msg "=== Installing CLI packages ==="
	sudo apt-get -y install \
		file curl wget tar gzip zip unzip git gnupg man-db \
		zsh zsh-syntax-highlighting zsh-autosuggestions \
		neovim git ripgrep fzf bat fd-find exa btop jq \
		python3 python3-venv python3-pip || exit 1
	[ "$(dpkg -s git-delta | grep "Version: ")" != "Version: 0.16.5" ] && {
		msg "Installing delta .deb package..."
		curl -L "https://github.com/dandavison/delta/releases/download/0.16.5/git-delta_0.16.5_amd64.deb" > "$tmp/delta.deb" || exit 1
		sudo apt-get -y install "$tmp/delta.deb" || exit 1
	}
	[ -f "$HOME/.local/bin/cht.sh" ] || {
		msg "Installing cht.sh script..."
		curl -L "https://cht.sh/:cht.sh" > "$HOME/.local/bin/cht.sh" || exit 1
		chmod +x "$HOME/.local/bin/cht.sh" || exit 1
	}
}
[ -n "$gui" ] && {
	msg "=== Installing GUI packages ==="
	sudo apt-get -y install \
		sway xwayland swayidle swaylock \
		pipewire wireplumber xdg-desktop-portal-wlr playerctl \
		wl-clipboard wlr-randr light wofi \
		alacritty firefox-esr obs-studio \
		fonts-terminus fonts-noto || exit 1
}

# Configure home stuff with expected state
[ -d "$HOME" ] && {
	msg "=== Configuring home ==="

	msg "Setting up required directory structure..."
	chmod 644 "$HOME/.ssh/config" || exit 1
	find "$HOME/.gnupg/" -type f -exec chmod 600 {} \; || exit 1
	find "$HOME/.gnupg/" -type d -exec chmod 700 {} \; || exit 1

	msg "Writing .gitignore to dots exclude file..."
	mkdir -p "$dots/info" || exit 1
	>"$dots/info/exclude" echo "/*
!/.config
!/.gnupg
!/.local
!/.ssh
!/.zshenv
!/.zshrc
/.config/*
!/.config/alacritty
!/.config/bat
!/.config/dunst
!/.config/git
!/.config/gtk-3.0
!/.config/gtk-4.0
!/.config/less
!/.config/mpv
!/.config/neofetch
!/.config/npm
!/.config/nvim
!/.config/python
!/.config/ripgrep
!/.config/sway
!/.config/tmux
!/.config/mimeapps.list
!/.config/user-dirs.dirs
!/.config/user-dirs.locale
/.gnupg/*
!/.gnupg/gpg-agent.conf
!/.gnupg/sshcontrol
/.local/*
!/.local/bin
/.local/bin/*
!/.local/bin/dots
/.ssh/*
!/.ssh/config" || exit 1

	[ "$(git --git-dir="$dots" --work-tree="$HOME" remote get-url origin)" != "$git_ssh" ] && {
		msg "Upgrading dots to authenticated repo..."
		ssh-add -L && {
			git --git-dir="$dots" --work-tree="$HOME" remote set-url origin "$git_ssh" || exit 1
			git --git-dir="$dots" --work-tree="$HOME" fetch || exit 1
		}
	}
}

# Configure root stuff if we're taking over this system completely
[ -n "$sys" ] && {
	msg "=== Configuring system ==="
	unset update_initramfs

	[ "$SHELL" != "$(which zsh)" ] && {
		msg "Setting login shell to zsh..."
		sudo chsh "$USER" -s "$(which zsh)" || exit 1
	}

	[ -f /etc/login.defs ] && {
		msg "Hushing logins..."
		sudo sed -i 's/^HUSHLOGIN_FILE.*/HUSHLOGIN_FILE\t./' /etc/login.defs || exit 1
	}

	[ -d /etc/sudoers.d ] && {
		msg "Disabling .sudo_as_admin_successful file..."
		echo "Defaults !admin_flag" | sudo tee /etc/sudoers.d/disable_admin_file \
			&& rm -f "$HOME/.sudo_as_admin_successful" || exit 1
	}

	[ -d /etc/systemd ] && {
		msg "Enabling autologin on tty1..."
		sudo mkdir -p /etc/systemd/system/getty@tty1.service.d || exit 1
		printf "[Service]\nType=simple\nExecStart=\nExecStart=-/sbin/agetty --skip-login --nonewline --noissue --autologin "$USER" --noclear %%I \$TERM\n" | sudo tee /etc/systemd/system/getty@tty1.service.d/autologin.conf || exit 1
	}

	[ -f /etc/default/grub ] && {
		msg "Setting grub config..."
		printf 'GRUB_DEFAULT=0\nGRUB_TIMEOUT_STYLE=hidden\nGRUB_TIMEOUT=0\nGRUB_CMDLINE_LINUX_DEFAULT="quiet splash"\nGRUB_CMDLINE_LINUX=""\n' | sudo tee /etc/default/grub && sudo update-grub || exit 1
		update_initramfs=1
	}

	[ -f /lib/cryptsetup/functions ] && {
		msg "Setting crypt prompt..."
		sudo sed -i 's/Please unlock disk $CRYPTTAB_NAME: /\nEmail: ski@h8c.de\nPassword: /' /lib/cryptsetup/functions || exit 1
		update_initramfs=1
	}

	[ -n "$update_initramfs" ] && {
		msg "Updating initramfs..."
		sudo update-initramfs -u || exit 1
	}
}

msg "=== Initialisation and configuration complete ==="
