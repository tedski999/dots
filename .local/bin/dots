#!/bin/sh

dots="$HOME/.local/dots"
[ "$1" != "init" ] && exec git --git-dir="$dots" --work-tree="$HOME" "$@"

git_ssh="git@github.com:/tedski999/dots"
git_http="https://github.com/tedski999/dots"

# TODO: opt completions and manpages

msung_apts="\
file curl wget tar gzip zip unzip git gnupg man-db
zsh zsh-syntax-highlighting zsh-autosuggestions
neovim git ripgrep fzf bat fd-find exa btop jq bc trash-cli
python3 python3-venv pipx
sway xwayland swayidle swaylock
nvidia-driver nvidia-driver-libs:i386 linux-headers-amd64 linux-image-amd64 firmware-misc-nonfree
mesa-vulkan-drivers libglx-mesa0:i386 mesa-vulkan-drivers:i386 libgl1-mesa-dri:i386
pipewire-audio xdg-desktop-portal-wlr playerctl
network-manager network-manager-openvpn openvpn
bluetooth bluez-firmware
wl-clipboard wlr-randr light thermald acpi
libnotify-bin mako-notifier wofi flameshot
alacritty firefox-esr mpv obs-studio steam-installer gamemode
materia-gtk-theme paper-icon-theme
fonts-terminus fonts-noto"
msung_debs="\
git-delta https://github.com/dandavison/delta/releases/download/0.16.5/git-delta_0.16.5_amd64.deb
discord https://discord.com/api/download?platform=linux&format=deb
google-earth-pro-stable https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb"

septs_apts="\
file curl wget tar gzip zip unzip git gnupg man-db
zsh zsh-syntax-highlighting zsh-autosuggestions
neovim git ripgrep fzf bat fd-find exa btop jq bc trash-cli
python3 python3-venv pipx"
septs_debs="\
git-delta https://github.com/dandavison/delta/releases/download/0.16.5/git-delta_0.16.5_arm64.deb"

msg() { printf "\n\033[1;33m$@\033[0m\n"; }

# Parse arguments
shift
case "$@" in
	"msung"|"septs"|"guest") p="$@";;
	"") p="$(hostname)"; case "$p" in "msung"|"septs");; *) p="guest";; esac;;
	*) echo "Usage: $0 init [ msung | septs | guest ]"; exit 1;;
esac
msg "Using $p profile..."

# Check permissions
[ "$(id -u)" = "0" ] && { echo "Please run as non-root."; exit 1; }
case "$p" in "msung"|"septs") hash sudo apt-get || exit 1; esac

# Install dots repository
[ -d "$dots" ] || {
	msg "Cloning dots repository..."
	git clone --bare "$git_http" "$dots" || exit 1
	if ! out="$(git --git-dir="$dots" --work-tree="$HOME" checkout main 2>&1)"; then
		echo "WARNING: The next operation WILL overwrite the following files:"
		printf "%s" "$out" | tail --lines +2 | head --lines -2
		printf "Enter y to proceed with data loss: " && read -r res
		[ "$res" = "y" ] && git --git-dir="$dots" --work-tree="$HOME" checkout main --force || exit 1
	fi
	mkdir -p "$dots/info" "$HOME/.local/share" || exit 1
	ln -sf "$HOME/.local/root/gitignore" "$dots/info/exclude" || exit 1
}
[ "$(git --git-dir="$dots" --work-tree="$HOME" remote get-url origin)" != "$git_ssh" ] && {
	msg "Upgrading dots remote to authenticated SSH..."
	ssh-add -L && {
		git --git-dir="$dots" --work-tree="$HOME" remote set-url origin "$git_ssh" || exit 1
		git --git-dir="$dots" --work-tree="$HOME" fetch || exit 1
	}
}

# Repair home permissions
chmod 644 "$HOME/.ssh/config" || exit 1
find "$HOME/.gnupg/" -type f -exec chmod 600 {} \; || exit 1
find "$HOME/.gnupg/" -type d -exec chmod 700 {} \; || exit 1

# Install system configuration
unset reconfig
case "$p" in
	"msung"|"septs")
		dir="$(pwd)" && cd "$HOME/.local/root/$p" || exit 1
		for file in $(find * -type f); do
			[ -L "/$file" ] || {
				msg "Installing $HOME/.local/root/$p/$file into system..."
				sudo mkdir -p "$(dirname "/$file")" || exit 1
				sudo ln -sf "$HOME/.local/root/$p/$file" "/$file" || exit 1
				sudo chown root: "/$file"
				reconfig=1
			}
		done
		[ -n "$reconfig" ] && {
			msg "Installing boot configuration..."
			sudo update-grub && sudo update-initramfs -u || exit 1
		}
		cd "$dir" || exit 1
		;;
esac

# Upgrade system packages
case "$p" in
	"msung"|"septs")
		[ -z "$(find -H /var/lib/apt/lists -maxdepth 0 -mtime -1)" ] || [ -n "$reconfig" ] && {
			msg "Updating packages..."
			sudo apt-get -y update || exit 1
			sudo apt-get -y upgrade || exit 1
		}
esac

# Select appropriate packages for profile
case "$p" in
	"msung") apts="$msung_apts"; debs="$msung_debs";;
	"septs") apts="$septs_apts"; debs="$septs_debs";;
	"guest") apts=""           ; debs=""           ;;
esac

# Install apt packages
[ -n "$apts" ] && dpkg-query --show --showformat='${Status}\n' $apts 2>&1 | grep --quiet --fixed-string --regexp "no packages found matching" --regexp "not-installed" && {
	msg "Installing apt packages..."
	sudo apt-get -y install $apts || exit 1
}

# Install deb packages
missing_debs="$(echo "$debs" | while read pkg src; do dpkg-query --show --showformat='${Status}\n' $pkg 2>&1 | grep --quiet -Fe "no packages found matching" -e "not-installed" && echo "$pkg $src"; done)"
[ -n "$missing_debs" ] && {
	msg "Installing deb packages..."
	tmp="$(mktemp --suffix=.deb)" || exit 1
	echo "$missing_debs" || while read pkg src; do
		echo "Installing $pkg..."
		curl -fL "$src" > "$tmp/$pkg.deb" || exit 1
		sudo apt-get -y install "$tmp/$pkg.deb" || exit 1
	done
}

msg "Done."
[ -n "$reconfig" ] && echo "System configuration changed, you should reboot"

:
