#!/bin/sh

# apt update; apt install --yes curl; curl https://h8c.de/dots | sh -s init msung tui

root="$HOME/.local/dots"
sc='\033[0;32m'
rc='\033[0m'

[ "$1" != "init" ] && exec git --git-dir="$root" --work-tree="$HOME" "$@"

#########
# Msung #
#########

# TODO: install manpages and completions

msung_zsh() {
	# TODO: install zsh from source
	# rm -rf "$opt/zsh" && mkdir -p "$opt/zsh"
	# curl -L https://www.zsh.org/pub/zsh-5.9.tar.xz | tar -xJf - -C "$opt/zsh"
	# cd "$opt/zsh/zsh-5.9" && ./configure --disable-dynamic && sed -i "s/link=no/link=static/g" "$opt/zsh/zsh-5.9/config.modules" && make; cd -
	# ln -sf "$opt/zsh/zsh-5.9/Src/zsh" "$bin/zsh"
	hash zsh || $sudo apt-get install --yes zsh

	rm -rf "$opt/zsh-syntax-highlighting" && mkdir -p "$opt/zsh-syntax-highlighting"
	curl -L https://github.com/zsh-users/zsh-syntax-highlighting/archive/refs/heads/master.zip -o "$tmp/zsh-syntax-highlighting.zip"
	unzip "$tmp/zsh-syntax-highlighting.zip" -d "$opt/zsh-syntax-highlighting"

	rm -rf "$opt/zsh-completions" && mkdir -p "$opt/zsh-completions"
	curl -L https://github.com/zsh-users/zsh-completions/archive/refs/tags/0.34.0.tar.gz | tar -xzf - -C "$opt/zsh-completions"

	rm -rf "$opt/arzsh-complete" && mkdir -p "$opt/arzsh-complete"
	git clone https://gitlab.aristanetworks.com/kev/arzsh-complete.git "$opt/arzsh-complete" || :
}

msung_nvim() {
	rm -rf "$opt/nvim" && mkdir -p "$opt/nvim"
	curl -L https://github.com/neovim/neovim/releases/download/v0.9.0/nvim.appimage -o "$tmp/nvim.appimage"
	chmod +x "$tmp/nvim.appimage"
	cd "$opt/nvim" && "$tmp/nvim.appimage" --appimage-extract; cd -
	ln -sf "$opt/nvim/squashfs-root/AppRun" "$bin/nvim"
	ln -sf "$bin/nvim" "$bin/vim"
	# TODO: neovim/pynvim
}

msung_rust() {
	# TODO: move to opt
	rm -rf "$XDG_DATA_HOME/cargo" "$XDG_DATA_HOME/rustup"
	curl https://sh.rustup.rs -sSf | sh -s -- --component rust-analyzer --component rust-src --no-modify-path -y
	. "$XDG_DATA_HOME/cargo/env"
	ln -sf "$RUSTUP_HOME/toolchains/stable-x86_64-unknown-linux-gnu/share/zsh/site-functions/*" "$cmp/"
	rustup completions zsh > "$cmp/_rustup"
}

msung_fzf() {
	rm -rf "$opt/fzf" && mkdir -p "$opt/fzf"
	curl -L https://github.com/junegunn/fzf/releases/download/0.40.0/fzf-0.40.0-linux_amd64.tar.gz | tar -xzf - -C "$opt/fzf"
	curl -L https://raw.githubusercontent.com/junegunn/fzf/master/shell/completion.zsh -o "$opt/fzf/completion.zsh"
	curl -L https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.zsh -o "$opt/fzf/key-bindings.zsh"
	ln -sf "$opt/fzf/fzf" "$bin/fzf"
}

msung_rg() {
	rm -rf "$opt/rg" && mkdir -p "$opt/rg"
	curl -L https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep-13.0.0-x86_64-unknown-linux-musl.tar.gz | tar -xzf - -C "$opt/rg"
	ln -sf "$opt/rg/ripgrep-13.0.0-x86_64-unknown-linux-musl/rg" "$bin/rg"
}

msung_bat() {
	rm -rf "$opt/bat" && mkdir -p "$opt/bat"
	curl -L https://github.com/sharkdp/bat/releases/download/v0.23.0/bat-v0.23.0-x86_64-unknown-linux-musl.tar.gz | tar -xzf - -C "$opt/bat"
	ln -sf "$opt/bat/bat-v0.23.0-x86_64-unknown-linux-musl/bat" "$bin/bat"
}

msung_fd() {
	rm -rf "$opt/fd" && mkdir -p "$opt/fd"
	curl -L https://github.com/sharkdp/fd/releases/download/v8.7.0/fd-v8.7.0-x86_64-unknown-linux-musl.tar.gz | tar -xzf - -C "$opt/fd"
	ln -sf "$opt/fd/fd-v8.7.0-x86_64-unknown-linux-musl/fd" "$bin/fd"
}

msung_exa() {
	rm -rf "$opt/exa" && mkdir -p "$opt/exa"
	curl -L https://github.com/ogham/exa/releases/download/v0.10.1/exa-linux-x86_64-musl-v0.10.1.zip -o "$tmp/exa.zip"
	unzip "$tmp/exa.zip" -d "$opt/exa"
	ln -sf "$opt/exa/bin/exa" "$bin/exa"
	ln -sf "$opt/exa/zsh-completions" "$cmp/"
}

msung_mosh() {
	# TODO: mosh
	# download 1.4.0 source
	# patch with #1167 Improve cursor style handling
	# build and install
	:
}

#msung_hyprland() {
#	rm -rf "$opt/hyprland" && mkdir -p "$opt/hyprland"
#	curl -L https://github.com/hyprwm/Hyprland/releases/download/v0.25.0/v0.25.0.tar.gz | tar -xzf - -C "$opt/hyprland"
#	$sudo ln -sf "$opt/hyprland/hyprland/Hyprland" "/usr/bin/Hyprland"
#	$sudo ln -sf "$opt/hyprland/hyprland/hyprctl" "/usr/bin/hyprctl"
#	$sudo ln -sf "$opt/hyprland/hyprland/libwlroots.so.12032" "/usr/lib/libwlroots.so.12032"
#	$sudo ln -sf "$opt/hyprland/hyprland/examples/hyprland.desktop" "/usr/share/wayland-sessions/"
#}

msung_tui() {
	echo "${sc}Installing msung tui packages...${rc}"
	for package in zsh nvim rust fzf rg bat fd exa mosh; do
		"msung_$package"
	done
	echo "${sc}Finished installing msung tui packages.${rc}"
}

msung_gui() {
	echo "${sc}Installing msung gui packages...${rc}"

	# TODO: waybar and mako-notifier are redundant if going with sway
	# should look into river or maybe even possibly hyprland
	$sudo apt-get install --yes software-properties-common
	$sudo add-apt-repository --yes ppa:agornostal/ulauncher
	$sudo apt-get install --yes \
		sway waybar ulauncher mako-notifier clipman \
		vieb alacritty fonts-terminus

	echo "${sc}Finished installing msung gui packages.${rc}"
}

###########
# Msungie #
###########

# TODO: msungie init

#########
# Septs #
#########

# TODO: septs init

###############
# Driver code #
###############

set -e

hash sudo 2>/dev/null && sudo="sudo" || sudo=""
[ "$(id --user)" -ne 0 ] || [ -z "$SUDO_USER" ] || { echo "Run without sudo privileges."; exit 1; }

shift
device="$1"
case "$device" in
	"msung"|"septs"|"msungie") ;;
	"") echo "Usage: dots init <device> [targets...]"; exit 1 ;;
	*) echo "Unknown device: $device"; exit 1 ;;
esac

shift
funcs=""
for target in "$@"; do
	func="${device}_${target}"
	type "$func" >/dev/null 2>&1 || { echo "Unknown target for $device: $target"; exit 1; }
	funcs="$funcs$func "
done

hash apt-get && $sudo apt-get update --yes
hash curl tar unzip || $sudo apt-get install --yes curl tar unzip

[ -e "$root" ] || {
	echo "${sc}$root missing, bootstrapping into $HOME...${rc}"
	hash git || $sudo apt-get install --yes git
	mkdir -p "$HOME/.ssh" && ssh-keyscan github.com >> "$HOME/.ssh/known_hosts"
	git clone --bare git@github.com:/tedski999/dots "$root" || git clone --bare https://github.com/tedski999/dots "$root"
	if ! out=$(git --git-dir="$root" --work-tree="$HOME" checkout main 2>&1); then
		echo "WARNING: The next operation WILL overwrite the following files:"
		printf "%s" "$out" | tail --lines +2 | head --lines -2
		printf "Enter YES to proceed with data loss: " && read -r res
		[ "$res" = "YES" ] || [ "$res" = "yes" ] || { echo "Aborted."; exit; }
		git --git-dir="$root" --work-tree="$HOME" checkout main --force
	fi
	echo "${sc}Dots successfully installed into $HOME${rc}"
}

. "$HOME/.zshenv" || { echo "Unable to init: Have dots been installed?"; exit 1; }

mkdir -p "$root/info"
>"$root/info/exclude" echo "\
/*
!/.config
!/.gnupg
!/.local
!/.ssh
!/.zshenv
!/.zshrc

/.config/*
!/.config/alacritty
!/.config/bat
!/.config/git
!/.config/npm
!/.config/nvim
!/.config/tmux
!/.config/wget
!/.config/mimeapps.list
!/.config/user-dirs.dirs
!/.config/user-dirs.locale
!/.config/ripgrep

/.gnupg/*
!/.gnupg/gpg-agent.conf
!/.gnupg/sshcontrol

/.local/*
!/.local/bin
/.local/bin/*
!/.local/bin/cachecmd
!/.local/bin/dots
!/.local/bin/git

/.ssh/*
!/.ssh/config"

tmp="$(mktemp --directory)"
bin="$HOME/.local/bin"
opt="$HOME/.local/opt"
cmp="$ZSH_DATA/completions"
mkdir -p "$bin" "$opt" "$cmp"

for func in $funcs; do
	"$func"
done

echo "Dots init done."
