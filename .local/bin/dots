#!/bin/sh

dots="$HOME/.local/dots"
git="git --git-dir="$dots" --work-tree="$HOME""
[ "$1" != "init" ] && exec $git "$@"

git_ssh="git@github.com:/tedski999/dots"
git_http="https://github.com/tedski999/dots"
msung_pkgs="\
zsh zsh-autosuggestions zsh-syntax-highlighting
curl wget tar gzip zip unzip gnupg man-db
git eza fzf ripgrep fd lf less bat btop git-delta jq
sway swayidle swaylock waybar wofi xorg-xwayland xf86-video-nouveau mesa
pipewire wireplumber pipewire-jack xdg-desktop-portal-wlr playerctl
wl-clipboard cliphist light acpi discord alacritty mako flameshot
materia-gtk-theme breeze-icons noto-fonts ttf-terminus-nerd
python3 rustup"
septs_apts="\
zsh zsh-syntax-highlighting zsh-autosuggestions
curl wget tar gzip zip unzip gnupg man-db
git exa fzf ripgrep fd lf less bat btop jq
python3 python3-venv"
septs_debs="\
git-delta https://github.com/dandavison/delta/releases/download/0.16.5/git-delta_0.16.5_arm64.deb"
# TODO: guest should have opt script links installed

msg() { printf "\n\033[1;33m$@\033[0m\n"; }

# Parse arguments
shift
case "$@" in
	"msung"|"septs"|"guest") p="$@";;
	"") p="$(uname --node)"; case "$p" in "msung"|"septs");; *) p="guest";; esac;;
	*) echo "Usage: $0 init [ msung | septs | guest ]"; exit 1;;
esac
msg "Using $p profile..."

# Check permissions
[ "$(id -u)" = "0" ] && { echo "Please run as non-root"; exit 1; }
case "$p" in
	"msung") hash sudo pacman || exit 1;;
	"septs") hash sudo apt-get || exit 1;;
esac

# Clone dots repository
[ -d "$dots" ] || {
	msg "Cloning dots repository..."
	git clone --bare "$git_http" "$dots" || exit 1
	if ! out="$($git checkout main 2>&1)"; then
		echo "WARNING: The next operation WILL overwrite the following files:"
		printf "%s" "$out" | tail --lines +2 | head --lines -2
		printf "Enter y to proceed with data loss: " && read -r res
		[ "$res" = "y" ] && $git checkout main --force || exit 1
	fi
	mkdir -p "$dots/info" "$HOME/.local/share" || exit 1
	ln -sf "$HOME/.local/root/gitignore" "$dots/info/exclude" || exit 1
}
[ "$($git remote get-url origin)" != "$git_ssh" ] && {
	msg "Upgrading dots remote to authenticated SSH..."
	ssh-add -L && { $git remote set-url origin "$git_ssh" && $git fetch || exit 1; }
}

# Pre-install configuration
unset reconfig
chmod 644 "$HOME/.ssh/config" || exit 1
find "$HOME/.gnupg/" -type f -exec chmod 600 {} \; || exit 1
find "$HOME/.gnupg/" -type d -exec chmod 700 {} \; || exit 1
case "$p" in
	"msung"|"septs")
		for file in $(find "$HOME/.local/root/$p" -type f -printf %P\\n); do
			sudo [ -L "/$file" ] || {
				msg "Installing $HOME/.local/root/$p/$file into system..."
				sudo mkdir -p "$(dirname "/$file")" || exit 1
				sudo chown root: "$HOME/.local/root/$p/$file" || exit 1
				sudo ln -sf "$HOME/.local/root/$p/$file" "/$file" || exit 1
				reconfig=1
			}
		done
		;;
esac

# Install packages
case "$p" in
	"msung")
		pkgs="$(sudo pacman --query --check --quiet $msung_pkgs 2>&1 | cut -d "'" -f 2)"
		[ -n "$pkgs" ] && {
			msg "Installing packages..."
			sudo pacman --sync --needed --noconfirm $pkgs || exit 1
		}
		;;
	"septs")
		dpkg-query --show --showformat='${Status}\n' $septs_apts 2>&1 | grep --quiet --fixed-string --regexp "no packages found matching" --regexp "not-installed" && {
			msg "Installing packages..."
			sudo apt-get --assume-yes install $septs_apts || exit 1
		}
		echo "$septs_debs" | while read pkg src; do
			dpkg-query --show --showformat='${Status}\n' $pkg 2>&1 | grep --quiet -Fe "no packages found matching" -e "not-installed" && {
				echo "Installing $pkg..."
				tmp="$(mktemp --suffix=.deb)" || exit 1
				curl -fL "$src" > "$tmp" || exit 1
				sudo apt-get --assume-yes install "$tmp" || exit 1
			}
		done
		;;
esac

# Post-install configuration
case "$p" in
	"msung")
		[ "$SHELL" != "$(command -v zsh)" ] && {
			msg "Setting login shell to zsh..."
			sudo chsh "$USER" -s "$(command -v zsh)" || exit 1
		}
		sudo systemctl is-enabled snapshots.timer >/dev/null || {
			msg "Enabling btrfs snapshot daemon..."
			sudo systemctl enable snapshots.timer || exit 1
		}
		[ -n "$reconfig" ] && {
			msg "Installing boot configuration..."
			sudo grub-mkconfig -o /boot/grub/grub.cfg || exit 1
			sudo mkinitcpio --allpresets || { [ $? -ne 1 ] && exit 1; }
		}
		;;
	"septs")
		[ "$SHELL" != "$(command -v zsh)" ] && {
			msg "Setting login shell to zsh..."
			sudo chsh "$USER" -s "$(command -v zsh)" || exit 1
		}
		;;
esac

msg "Done."
