#!/bin/sh

dots="$HOME/.local/dots"
[ "$1" != "init" ] && exec git --git-dir="$dots" --work-tree="$HOME" "$@"

git_ssh="git@github.com:/tedski999/dots"
git_http="https://github.com/tedski999/dots"

gitignore="\
/*
!/.config
!/.gnupg
!/.local
!/.ssh
!/.zshenv
!/.zshrc

/.config/*
!/.config/alacritty
!/.config/bat
!/.config/dunst
!/.config/git
!/.config/gtk-3.0
!/.config/gtk-4.0
!/.config/less
!/.config/mpv
!/.config/neofetch
!/.config/npm
!/.config/nvim
!/.config/python
!/.config/ripgrep
!/.config/sway
!/.config/tmux
!/.config/mimeapps.list
!/.config/user-dirs.dirs
!/.config/user-dirs.locale

/.gnupg/*
!/.gnupg/gpg-agent.conf
!/.gnupg/sshcontrol

/.local/*
!/.local/bin
/.local/bin/*
!/.local/bin/dots

/.ssh/*
!/.ssh/config"

msung_pkgs="\
file curl wget tar gzip zip unzip git gnupg man-db
zsh zsh-syntax-highlighting zsh-autosuggestions
neovim git ripgrep fzf bat fd-find exa btop jq
python3 python3-venv python3-pip
sway xwayland swayidle swaylock
pipewire wireplumber xdg-desktop-portal-wlr playerctl
wl-clipboard wlr-randr light wofi
alacritty firefox-esr obs-studio
materia-gtk-theme paper-icon-theme
fonts-terminus fonts-noto"

septs_pkgs="\
file curl wget tar gzip zip unzip git gnupg man-db
zsh zsh-syntax-highlighting zsh-autosuggestions
neovim git ripgrep fzf bat fd-find exa btop jq
python3 python3-venv python3-pip"

guest_bins="git vi"

msung_agetty_autologin="\
[Service]
Type=simple
ExecStart=
ExecStart=-/sbin/agetty --skip-login --nonewline --noissue --autologin \"$USER\" --noclear %%I \$TERM"

msung_grub="\
GRUB_DEFAULT=0
GRUB_TIMEOUT_STYLE=hidden
GRUB_TIMEOUT=0
GRUB_CMDLINE_LINUX_DEFAULT=\"splash quiet\"
GRUB_CMDLINE_LINUX=\"\""

msung_prompt="$(echo "ClByb3BlcnR5IG9mIFRlZCBKb2huc29uCgpFbWFpbDogc2tpQGg4Yy5kZQpQYXNzd29yZDogCg==" | base64 --decode | sed 's:[\\/&]:\\&:g; $!s:$:\\:')"

msg() { printf "\n\033[1;33m$@\033[0m\n"; }

# Parse arguments
case "$2" in
	"msung"|"septs"|"guest") msg "Using $2 profile";;
	*) echo "Usage: $0 init { msung | septs | guest }"; exit 1;;
esac

# Check permissions
[ "$(id -u)" = "0" ] && { echo "Please run as non-root."; exit 1; }
case "$2" in
	"msung"|"septs") hash sudo apt-get && sudo -v || exit 1 ;;
esac

# Upgrade system
case "$2" in
	"msung"|"septs") msg "Updating packages..."; sudo apt-get -y update && sudo apt-get -y upgrade || exit 1;;
esac

# Prerequisites
case "$2" in
	"msung"|"septs") hash git || { msg "Installing prerequisites..."; sudo apt-get -y install git || exit 1; };;
	"guest") hash git || exit 1;;
esac

# Pre-op health check
# TODO: debian, systemd
case "$2" in
	"msung") ;;
	"septs") ;;
	"guest") ;;
esac

# Dots repository
[ -d "$dots" ] || {
	msg "Cloning dots repository..."
	git clone --bare "$git_http" "$dots" || exit 1
	if ! out="$(git --git-dir="$dots" --work-tree="$HOME" checkout main 2>&1)"; then
		echo "WARNING: The next operation WILL overwrite the following files:"
		printf "%s" "$out" | tail --lines +2 | head --lines -2
		printf "Enter y to proceed with data loss: " && read -r res
		[ "$res" = "y" ] && git --git-dir="$dots" --work-tree="$HOME" checkout main --force || exit 1
	fi
}
[ "$(git --git-dir="$dots" --work-tree="$HOME" remote get-url origin)" != "$git_ssh" ] && {
	msg "Upgrading dots remote to authenticated SSH..."
	ssh-add -L && {
		git --git-dir="$dots" --work-tree="$HOME" remote set-url origin "$git_ssh" || exit 1
		git --git-dir="$dots" --work-tree="$HOME" fetch || exit 1
	}
}
[ "$(cat "$dots/info/exclude")" != "$gitignore" ] && {
	msg "Writing dots exclude file..."
	mkdir -p "$dots/info" || exit 1
	echo "$gitignore" > "$dots/info/exclude" || exit 1
}

# Packages
case "$2" in
	"msung")
		dpkg-query --show --showformat='${Status}\n' $msung_pkgs git-delta 2>&1 | grep --quiet --invert-match "install ok installed" && {
			msg "Installing packages..."
			sudo apt-get -y install $msung_pkgs || exit 1
			curl -L "https://github.com/dandavison/delta/releases/download/0.16.5/git-delta_0.16.5_amd64.deb" > "/tmp/delta.deb" && sudo apt-get -y install "/tmp/delta.deb" || exit 1
		}
		;;
	"septs")
		dpkg-query --show --showformat='${Status}\n' $septs_pkgs git-delta 2>&1 | grep --quiet --invert-match "install ok installed" && {
			msg "Installing packages..."
			sudo apt-get -y install $septs_pkgs || exit 1
			curl -L "https://github.com/dandavison/delta/releases/download/0.16.5/git-delta_0.16.5_arm64.deb" > "/tmp/delta.deb" && sudo apt-get -y install "/tmp/delta.deb" || exit 1
		}
		;;
	"guest")
		hash $guest_bins || exit 1
		;;
esac

# Home configuration
mkdir -p "$HOME/.local/share" "$HOME/.local/state" || exit 1
chmod 644 "$HOME/.ssh/config" || exit 1
find "$HOME/.gnupg/" -type f -exec chmod 600 {} \; || exit 1
find "$HOME/.gnupg/" -type d -exec chmod 700 {} \; || exit 1
[ -x "$HOME/.local/bin/cht.sh" ] || {
	msg "Installing cht.sh script..."
	curl "https://cht.sh/:cht.sh" > "$HOME/.local/bin/cht.sh" || exit 1
	chmod +x "$HOME/.local/bin/cht.sh" || exit 1
}

# System configuration
case "$2" in
	"msung")
		unset update_initramfs
		[ "$SHELL" != "$(which zsh)" ] && {
			msg "Setting login shell to zsh..."
			sudo chsh "$USER" -s "$(which zsh)" || exit 1
		}
		#msg "Hushing logins..."
		#sudo sed -i 's/^HUSHLOGIN_FILE.*/HUSHLOGIN_FILE\t./' "/etc/login.defs" || exit 1
		[ -f "/etc/sudoers.d/disable_admin_file" ] || {
			msg "Disabling .sudo_as_admin_successful file..."
			echo "Defaults !admin_flag" | sudo tee "/etc/sudoers.d/disable_admin_file" || exit 1
		}
		[ -f "/etc/systemd/system/getty@tty1.service.d/autologin.conf" ] || {
			msg "Enabling autologin on tty1..."
			sudo mkdir -p "/etc/systemd/system/getty@tty1.service.d" || exit 1
			printf "$msung_agetty_autologin" | sudo tee "/etc/systemd/system/getty@tty1.service.d/autologin.conf" || exit 1
		}
		[ "$(cat "/etc/default/grub")" != "$msung_grub" ] && {
			msg "Setting grub config..."
			printf "$msung_grub" | sudo tee "/etc/default/grub" || exit 1
			sudo update-grub || exit 1
			update_initramfs=1
		}
		grep --quiet --fixed-strings "Please unlock disk \$CRYPTTAB_NAME: " "/lib/cryptsetup/functions" && {
			msg "Setting crypt prompt..."
			sudo sed -i "s/Please unlock disk \$CRYPTTAB_NAME: /$msung_prompt/" "/lib/cryptsetup/functions" || exit 1
			update_initramfs=1
		}
		[ -n "$update_initramfs" ] && {
			msg "Updating initramfs..."
			sudo update-initramfs -u || exit 1
		}
		;;
	"septs")
		[ "$SHELL" != "$(which zsh)" ] && {
			msg "Setting login shell to zsh..."
			sudo chsh "$USER" -s "$(which zsh)" || exit 1
		}
		;;
	"guest")
		;;
esac

# Post-op health check
# TODO: desktop daemons
case "$2" in
	"msung") ;;
	"septs") ;;
	"guest") ;;
esac

msg "Done."
