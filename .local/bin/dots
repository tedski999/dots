#!/bin/sh

dots="$HOME/.local/dots"
[ "$1" != "init" ] && exec git --git-dir="$dots" --work-tree="$HOME" "$@"

git_ssh="git@github.com:/tedski999/dots"
git_http="https://github.com/tedski999/dots"

gitignore="\
/*
!/.config
!/.gnupg
!/.local
!/.ssh
!/.zshenv
!/.zshrc

/.config/*
!/.config/alacritty
!/.config/bat
!/.config/dunst
!/.config/flameshot
!/.config/git
!/.config/gtk-3.0
!/.config/gtk-4.0
!/.config/less
!/.config/mako
!/.config/mpv
!/.config/neofetch
!/.config/npm
!/.config/nvim
!/.config/python
!/.config/ripgrep
!/.config/sway
!/.config/swaylock
!/.config/tmux
!/.config/waybar
!/.config/wofi
!/.config/mimeapps.list
!/.config/user-dirs.dirs
!/.config/user-dirs.locale

/.gnupg/*
!/.gnupg/gpg-agent.conf
!/.gnupg/sshcontrol

/.local/*
!/.local/bin
/.local/bin/*
!/.local/bin/choose
!/.local/bin/displayctl
!/.local/bin/dots
!/.local/bin/networkctl
!/.local/bin/powerctl

/.ssh/*
!/.ssh/config"

msung_apt_sources="\
deb http://deb.debian.org/debian/ bookworm main contrib non-free non-free-firmware
deb-src http://deb.debian.org/debian/ bookworm main contrib non-free non-free-firmware

deb http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware
deb-src http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware

deb http://deb.debian.org/debian/ bookworm-updates main contrib non-free non-free-firmware
deb-src http://deb.debian.org/debian/ bookworm-updates main contrib non-free non-free-firmware"

msung_pkgs="\
file curl wget tar gzip zip unzip git gnupg man-db
zsh zsh-syntax-highlighting zsh-autosuggestions
neovim git ripgrep fzf bat fd-find exa btop jq bc
python3 python3-venv python3-pip pipx
sway xwayland swayidle swaylock
pipewire-audio xdg-desktop-portal-wlr playerctl
network-manager network-manager-openvpn openvpn
bluetooth bluez-firmware
wl-clipboard wlr-randr light thermald acpi
libnotify-bin mako-notifier wofi flameshot
alacritty firefox-esr obs-studio
materia-gtk-theme paper-icon-theme
fonts-terminus fonts-noto"

msung_pipx="\
trash-cli shtab"

# TODO: gaming but less faurked
# ensure non-free and contrib
# dpkg --add-architecture i386
#linux-headers-amd64  nvidia-driver nvidia-driver-libs:i386 firmware-misc-nonfree steam-installer
# MAYBE: lsof mesa-vulkan-drivers libglx-mesa0:i386 mesa-vulkan-drivers:i386 libgl1-mesa-dri:i386
# MAYBE?: vulkan-utils:i386 gamemode
# __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia %command%
# gamemoderun %command%

# bumblebee-nvidia primus-nvidia primus-vk-nvidia
# primus-libs:i386 libprimus-vk1:i386 nvidia-primus-vk-wrapper:i386 nvidia-driver-libs-i386
# relogin for bumblebee group to take effect

septs_pkgs="\
file curl wget tar gzip zip unzip git gnupg man-db
zsh zsh-syntax-highlighting zsh-autosuggestions
neovim git ripgrep fzf bat fd-find exa btop jq bc
python3 python3-venv python3-pip pipx"

septs_pipx="\
trash-cli shtab"

guest_bins="git vi"

msung_logind="\
[Login]
HandlePowerKey=suspend
HandlePowerKeyLongPress=poweroff
HandleLidSwitch=ignore
HandleLidSwitchExternalPower=ignore
HandleLidSwitchDocked=ignore"

msung_issue="Welcome to \l
 "

msung_motd=" "

msung_autologin="\
[Service]
Type=simple
ExecStart=
ExecStart=-/sbin/agetty --delay 3 --noissue --init-string \"\\\nProperty of Ted Johnson <ted@h8c.de>\" --skip-login --login-options '-p -- "$USER"' - \$TERM"

msung_grub="\
GRUB_DEFAULT=0
GRUB_TIMEOUT=1
GRUB_TIMEOUT_STYLE=hidden
GRUB_RECORDFAIL_TIMEOUT=1
GRUB_CMDLINE_LINUX_DEFAULT=\"splash\"
GRUB_CMDLINE_LINUX=\"\""

msg() { printf "\n\033[1;33m$@\033[0m\n"; }

pipx_install() {
	pipx list --short | cut -d " " -f 1 | grep --quiet --fixed-string "$1" || {
		msg "Installing $1..."
		pipx install "$1" && pipx inject $@ || exit 1
	}
}

# Parse arguments
shift
case "$@" in
	"msung"|"septs"|"guest") p="$@";;
	"") p="$(hostname)"; case "$p" in "msung"|"septs");; *) p="guest";; esac;;
	*) echo "Usage: $0 init [ msung | septs | guest ]"; exit 1;;
esac
msg "Using $p profile"

# Check permissions
[ "$(id -u)" = "0" ] && { echo "Please run as non-root."; exit 1; }
case "$p" in
	"msung"|"septs") hash sudo apt-get && sudo -v || exit 1 ;;
esac

# Pre-op health check
# TODO: check debian, systemd, sudo btrfs device stats ...
case "$p" in
	"msung") ;;
	"septs") ;;
	"guest") ;;
esac

# Set package sources
case "$p" in
	"msung")
		[ "$(cat "/etc/apt/sources.list")" != "$msung_apt_sources" ] && {
			msg "Setting apt sources..."
			echo "$msung_apt_sources" | sudo tee "/etc/apt/sources.list" || exit 1
		}
		;;
	"septs") # TODO: set raspberry pi package sources
		:
		;;
esac

# Upgrade system
case "$p" in
	"msung"|"septs")
		[ -z "$(find -H /var/lib/apt/lists -maxdepth 0 -mtime -1)" ] && {
			msg "Updating packages..."
			sudo apt-get -y update && sudo apt-get -y upgrade || exit 1
		}
esac

# Ensure git is installed
hash git 2>/dev/null || {
	case "$p" in
		"msung"|"septs") msg "Installing git..."; sudo apt-get -y install git || exit 1;;
		"guest") echo "Cannot find git, is it installed?"; exit 1;;
	esac
}

# Dots repository
[ -d "$dots" ] || {
	msg "Cloning dots repository..."
	git clone --bare "$git_http" "$dots" || exit 1
	if ! out="$(git --git-dir="$dots" --work-tree="$HOME" checkout main 2>&1)"; then
		echo "WARNING: The next operation WILL overwrite the following files:"
		printf "%s" "$out" | tail --lines +2 | head --lines -2
		printf "Enter y to proceed with data loss: " && read -r res
		[ "$res" = "y" ] && git --git-dir="$dots" --work-tree="$HOME" checkout main --force || exit 1
	fi
}
[ "$(git --git-dir="$dots" --work-tree="$HOME" remote get-url origin)" != "$git_ssh" ] && {
	msg "Upgrading dots remote to authenticated SSH..."
	ssh-add -L && {
		git --git-dir="$dots" --work-tree="$HOME" remote set-url origin "$git_ssh" || exit 1
		git --git-dir="$dots" --work-tree="$HOME" fetch || exit 1
	}
}
[ "$(cat "$dots/info/exclude")" != "$gitignore" ] && {
	msg "Writing dots exclude file..."
	mkdir -p "$dots/info" || exit 1
	echo "$gitignore" > "$dots/info/exclude" || exit 1
}

# Packages
tmp="$(mktemp --directory)"
case "$p" in
	"msung")
		dpkg-query --show --showformat='${Status}\n' $msung_pkgs 2>&1 | grep --quiet --invert-match "install ok installed" && {
			msg "Installing packages..."
			sudo apt-get -y install $msung_pkgs || exit 1
		}
		hash delta || {
			msg "Installing delta .deb..."
			curl -L "https://github.com/dandavison/delta/releases/download/0.16.5/git-delta_0.16.5_amd64.deb" > "$tmp/delta.deb" || exit 1
			sudo apt-get -y install "$tmp/delta.deb" || exit 1
		}
		hash discord || {
			msg "Installing Discord .deb..."
			curl -L "https://discord.com/api/download?platform=linux&format=deb" > "$tmp/discord.deb" || exit 1
			sudo apt-get -y install "$tmp/discord.deb" || exit 1
		}
		hash google-earth-pro || {
			msg "Installing Google Earth Pro .deb..."
			curl -L "https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb" > "$tmp/google-earth-pro.deb" || exit 1
			sudo apt-get -y install "$tmp/google-earth-pro.deb" || exit 1
		}
		hash cliphist || {
			msg "Installing cliphist binary..."
			curl -L "https://github.com/sentriz/cliphist/releases/download/v0.4.0/v0.4.0-linux-amd64" > "$HOME/.local/bin/cliphist" || exit 1
			chmod +x "$HOME/.local/bin/cliphist" || exit 1
		}
		echo "$msung_pipx" | while IFS= read -r reqs; do pipx_install $reqs; done
		;;
	"septs")
		dpkg-query --show --showformat='${Status}\n' $septs_pkgs 2>&1 | grep --quiet --invert-match "install ok installed" && {
			msg "Installing packages..."
			sudo apt-get -y install $septs_pkgs || exit 1
		}
		hash delta || {
			msg "Installing delta .deb..."
			curl -L "https://github.com/dandavison/delta/releases/download/0.16.5/git-delta_0.16.5_arm64.deb" > "$tmp/delta.deb" || exit 1
			sudo apt-get -y install "$tmp/delta.deb" || exit 1
		}
		echo "$septs_pipx" | while IFS= read -r reqs; do pipx_install $reqs; done
		;;
	"guest")
		# TODO: attempt to install required binaries to .local/bin
		hash $guest_bins || exit 1
		;;
esac
rm -r "$tmp"

# Home configuration
mkdir -p "$HOME/.local/share" "$HOME/.local/state" || exit 1
chmod 644 "$HOME/.ssh/config" || exit 1
find "$HOME/.gnupg/" -type f -exec chmod 600 {} \; || exit 1
find "$HOME/.gnupg/" -type d -exec chmod 700 {} \; || exit 1
[ -x "$HOME/.local/bin/cht.sh" ] || {
	msg "Installing cht.sh script..."
	curl "https://cht.sh/:cht.sh" > "$HOME/.local/bin/cht.sh" || exit 1
	chmod +x "$HOME/.local/bin/cht.sh" || exit 1
}

# System configuration
case "$p" in
	"msung")
		[ "$SHELL" != "$(which zsh)" ] && {
			msg "Setting login shell to zsh..."
			sudo chsh "$USER" -s "$(which zsh)" || exit 1
		}
		[ -f "/usr/local/share/zsh/site-functions/_trash" ] || {
			msg "Installing trash-cli completions..."
			for cmd in trash-empty trash-list trash-restore trash-put trash; do
				$cmd --print-completion zsh | sudo tee "/usr/local/share/zsh/site-functions/_$cmd" >/dev/null
			done
		}
		[ "$(cat "/etc/network/interfaces")" != "source /etc/network/interfaces.d/*" ] && {
			msg "Handing over management of all network interfaces to Network Manager..."
			echo "source /etc/network/interfaces.d/*" | sudo tee "/etc/network/interfaces" || exit 1
			sudo systemctl restart NetworkManager
		}
		[ "$(cat "/etc/systemd/logind.conf")" != "$msung_logind" ] && {
			msg "Setting logind options..."
			echo "$msung_logind" | sudo tee "/etc/systemd/logind.conf" || exit 1
		}
		[ "$(cat "/etc/issue")" != "$msung_issue" ] && {
			msg "Setting issue..."
			echo "$msung_issue" | sudo tee "/etc/issue" || exit 1
		}
		[ "$(cat "/etc/motd")" != "$msung_motd" ] && {
			msg "Setting motd..."
			echo "$msung_motd" | sudo tee "/etc/motd" || exit 1
			sudo rm -f "/etc/update-motd.d/"* || exit 1
		}
		[ -f "/etc/sudoers.d/disable_admin_file" ] || {
			msg "Disabling .sudo_as_admin_successful file..."
			echo "Defaults !admin_flag" | sudo tee "/etc/sudoers.d/disable_admin_file" || exit 1
			rm -f "$HOME/.sudo_as_admin_successful" || exit 1
		}
		[ -f "/etc/sysctl.d/20-quiet-printk.conf" ] || {
			msg "Setting sysctl verbosity..."
			echo "kernel.printk = 3 3 3 3" | sudo tee "/etc/sysctl.d/20-quiet-printk.conf" || exit 1
		}
		[ -f "/etc/systemd/system/getty@tty1.service.d/autologin.conf" ] || {
			msg "Enabling autologin on tty1..."
			sudo mkdir -p "/etc/systemd/system/getty@tty1.service.d" || exit 1
			printf "$msung_autologin" | sudo tee "/etc/systemd/system/getty@tty1.service.d/autologin.conf" || exit 1
		}
		[ "$(cat "/etc/default/grub")" != "$msung_grub" ] && {
			msg "Setting grub config..."
			printf "$msung_grub" | sudo tee "/etc/default/grub" || exit 1
			sudo update-grub && sudo update-initramfs -u || exit 1
		}
		;;
	"septs")
		[ "$SHELL" != "$(which zsh)" ] && {
			msg "Setting login shell to zsh..."
			sudo chsh "$USER" -s "$(which zsh)" || exit 1
		}
		;;
	"guest")
		;;
esac

# Post-op health check
# TODO: check desktop daemons
case "$p" in
	"msung") ;;
	"septs") ;;
	"guest") ;;
esac

msg "Done."
