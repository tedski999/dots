#!/bin/sh

dots="$HOME/.local/dots"
git="git --git-dir="$dots" --work-tree="$HOME""
[ "$1" != "init" ] && exec $git "$@"

git_ssh="git@github.com:/tedski999/dots"
git_http="https://github.com/tedski999/dots"

msung_pkgs="\
zsh zsh-autosuggestions zsh-syntax-highlighting
curl wget tar gzip zip unzip gnupg man-db jq bc
neovim git eza fzf ripgrep fd lf less bat btop git-delta pulsemixer
sway swaybg swayidle swaylock waybar wofi xorg-xwayland xf86-video-nouveau mesa
pipewire wireplumber pipewire-alsa pipewire-pulse pipewire-jack xdg-desktop-portal-wlr
networkmanager networkmanager-openvpn openvpn bluez bluez-utils
playerctl wl-clipboard cliphist light acpi thermald
firefox discord alacritty mako grim slurp mpv imv
materia-gtk-theme kvantum-theme-materia breeze-icons
noto-fonts noto-fonts-cjk ttf-terminus-nerd
archlinux-contrib pacman-contrib btrfs-progs grub efibootmgr python3 rustup"

septs_apts="\
zsh zsh-syntax-highlighting zsh-autosuggestions
curl wget tar gzip zip unzip gnupg man-db
git exa fzf ripgrep fd lf less bat btop jq
python3 python3-venv"

septs_debs="\
git-delta https://github.com/dandavison/delta/releases/download/0.16.5/git-delta_0.16.5_arm64.deb"

# TODO: guest should have opt script links installed

msg() { printf "\n\033[1;33m$@\033[0m\n"; }

# Parse arguments
case "$2" in "msung"|"septs"|"guest") p="$2";; *) echo "Unknown profile: $2"; exit 1;; esac
case "$3" in "full") full=1;; "") unset full;; *) echo "Unknown modifier: $3"; exit 1;; esac
msg "Using $p profile..."

# Check system
[ "$(id -u)" = "0" ] && { echo "Please run as non-root"; exit 1; }
case "$p" in
	"msung")
		hash sudo pacman || exit 1
		disks="/dev/disk/by-label/BOOT /dev/disk/by-label/SWAP /dev/disk/by-label/CRYPT /dev/disk/by-label/ROOT"
		disks="$(sudo blkid -o value -s TYPE $disks | xargs)"
		[ "$disks" = "vfat swap crypto_LUKS btrfs" ] || { echo "Incorrect disk layout"; exit 1; }
		;;
	"septs")
		hash sudo apt-get || exit 1
		;;
esac

# Clone dots repository
[ -d "$dots" ] || {
	msg "Cloning dots repository..."
	git clone --bare "$git_http" "$dots" || exit 1
	if ! out="$($git checkout main 2>&1)"; then
		echo "WARNING: The next operation WILL overwrite the following files:"
		printf "%s" "$out" | tail --lines +2 | head --lines -2
		printf "Enter y to proceed with data loss: " && read -r res
		[ "$res" = "y" ] && $git checkout main --force || exit 1
	fi
	mkdir -p "$dots/info" "$HOME/.local/share" || exit 1
	ln -sf "$HOME/.local/root/gitignore" "$dots/info/exclude" || exit 1
}
[ "$($git remote get-url origin)" != "$git_ssh" ] && {
	msg "Upgrading dots remote to authenticated SSH..."
	ssh-add -L && { $git remote set-url origin "$git_ssh" && $git fetch || exit 1; }
}

# Pre-install configuration
chmod 644 "$HOME/.ssh/config" || exit 1
find "$HOME/.gnupg/" -type f -exec chmod 600 {} \; || exit 1
find "$HOME/.gnupg/" -type d -exec chmod 700 {} \; || exit 1
case "$p" in
	"msung"|"septs")
		for file in $(find "$HOME/.local/root/$p" -type f -printf %P\\n); do
			sudo [ -L "/$file" ] || {
				msg "Installing $HOME/.local/root/$p/$file into system..."
				sudo mkdir -p "$(dirname "/$file")" || exit 1
				sudo chown root: "$HOME/.local/root/$p/$file" || exit 1
				sudo ln -sf "$HOME/.local/root/$p/$file" "/$file" || exit 1
			}
		done
		;;
esac

# Install packages
case "$p" in
	"msung")
		pkgs="$(sudo pacman --query --check --quiet $msung_pkgs 2>&1 | cut -d "'" -f 2)"
		[ -n "$pkgs" ] && {
			msg "Installing packages..."
			sudo pacman --sync --needed --noconfirm $pkgs || exit 1
		}
		;;
	"septs")
		dpkg-query --show --showformat='${Status}\n' $septs_apts 2>&1 | grep --quiet --fixed-string --regexp "no packages found matching" --regexp "not-installed" && {
			msg "Installing packages..."
			sudo apt-get --assume-yes install $septs_apts || exit 1
		}
		echo "$septs_debs" | while read pkg src; do
			dpkg-query --show --showformat='${Status}\n' $pkg 2>&1 | grep --quiet -Fe "no packages found matching" -e "not-installed" && {
				echo "Installing $pkg..."
				tmp="$(mktemp --suffix=.deb)" || exit 1
				curl -fL "$src" > "$tmp" || exit 1
				sudo apt-get --assume-yes install "$tmp" || exit 1
			}
		done
		;;
esac

# Post-install configuration
case "$p" in
	"msung")
		[ -L "/etc/localtime" ] || { msg "Setting localtime..."; sudo ln -sf /usr/share/zoneinfo/Europe/Dublin /etc/localtime && sudo hwclock --systohc || exit 1; }
		[ "$(timedatectl show --property NTP --value)" != "yes" ] && { msg "Enabling NTP..."; sudo timedatectl set-ntp true; }
		[ "$SHELL" != "$(command -v zsh)" ] && { msg "Setting login shell to zsh..."; sudo chsh "$USER" -s "$(command -v zsh)" || exit 1; }
		systemctl is-enabled NetworkManager.service >/dev/null || { msg "Enabling Network Manager service..."; sudo systemctl enable --now NetworkManager.service || exit 1; }
		systemctl is-enabled bluetooth.service >/dev/null || { msg "Enabling bluetooth service..."; sudo systemctl enable --now bluetooth.service || exit 1; }
		systemctl is-enabled fstrim.service >/dev/null || { msg "Enabling fstrim service..."; sudo systemctl enable --now fstrim.service || exit 1; }
		systemctl is-enabled thermald.service >/dev/null || { msg "Enabling thermald service..."; sudo systemctl enable --now thermald.service || exit 1; }
		systemctl is-enabled snapshots.timer >/dev/null || { msg "Enabling btrfs snapshot timer..."; sudo systemctl enable snapshots.timer || exit 1; }
		systemctl --user is-enabled pipewire-pulse.service >/dev/null || { msg "Enabling Pipewire Pulse user service..."; systemctl --user enable --now pipewire-pulse.service || exit 1; }
		[ -n "$full" ] && {
			msg "Generating locale..."; sudo locale-gen || exit 1
			msg "Generating grub.cfg..."; sudo grub-mkconfig -o /boot/grub/grub.cfg || exit 1
			msg "Generating initramfs..."; sudo mkinitcpio --allpresets || { [ $? -ne 1 ] && exit 1; }
		}
		;;
	"septs")
		[ "$SHELL" != "$(command -v zsh)" ] && { msg "Setting login shell to zsh..."; sudo chsh "$USER" -s "$(command -v zsh)" || exit 1; }
		;;
esac

msg "Done."
